#/*
# * Copyright (c) 2016 Adobe Systems Incorporated. All rights reserved.
# *
# * Permission is hereby granted, free of charge, to any person obtaining a
# * copy of this software and associated documentation files (the "Software"),
# * to deal in the Software without restriction, including without limitation
# * the rights to use, copy, modify, merge, publish, distribute, sublicense,
# * and/or sell copies of the Software, and to permit persons to whom the
# * Software is furnished to do so, subject to the following conditions:
# *
# * The above copyright notice and this permission notice shall be included in
# * all copies or substantial portions of the Software.
# *
# * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# * DEALINGS IN THE SOFTWARE.
# *
# */

location = /request-caching {
    internal;
    set $subrequest_method $echo_request_method;
    set_escape_uri $escaped_key $arg_key;

    client_max_body_size 35m;
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_in_file_only
    client_body_in_file_only on;

    content_by_lua '
        local sr_method = ngx.var.subrequest_method
        local cache = ngx.apiGateway.request_cache
        local key = ngx.var.escaped_key

        local rcache_cls = require "api-gateway.cache.request.rcache"
        local rcache = rcache_cls:new()

        rcache:handleRequest(sr_method, cache, key)
    ';
}


location / {
    LearningMode; #learning mode enabled, will not block requests, used for generating whitelists
    SecRulesEnabled;
    DeniedUrl "/RequestDenied";


    CheckRule "$SQL >= 8" BLOCK;
    CheckRule "$RFI >= 8" BLOCK;
    CheckRule "$XSS >= 8" BLOCK;
    CheckRule "$TRAVERSAL >= 8" BLOCK;
    CheckRule "$EVADE >= 8" BLOCK;
    root   /etc/api-gateway/html;
    index index.html index.htm;
}

location = /html/favicon.ico {
    default_type image/x-icon;
    expires 15s;
    root   /etc/api-gateway/;
}

location = /html/index.html {
    default_type text/html;
    expires 15s;
    root   /etc/api-gateway/;
}

location = /html/img_test.JPG {
    default_type image/jpeg;
    expires 25s;
    root   /etc/api-gateway/;
}

location ~ ^/cache/(?<subpath>.+) {
    sendfile off;

    srcache_default_expire 1000s;
    srcache_request_cache_control on; # honor Cache-control: no-cache and Pragma:no-cache

    set $key $request_uri;
    set_escape_uri $escaped_key $key;
    srcache_fetch GET /request-caching key=$escaped_key;
    srcache_store PUT /request-caching key=$escaped_key&exptime=$srcache_expire;
    # This directive controls what responses to store to the cache according to their status code.
    srcache_store_statuses 200 301 302;


        # force small buffers for test
        # proxy_buffer_size 1k;
        # proxy_buffers 2 1k;
        # proxy_buffering on;
        # proxy_busy_buffers_size 1k;

    # proxy_pass/fastcgi_pass/drizzle_pass/echo/etc...
    # or even static files on the disk
    proxy_pass http://127.0.0.1/html/$subpath;
}


location /health-check {
    #access_log off;
    access_log /var/log/api-gateway/healthcheck_access.log main buffer=64k;
    content_by_lua '
        ngx.say("API-Platform is running!")
        if jit then
            ngx.say("LuaJIT-" .. jit.version);
        else
            ngx.say("LuaJIT is not enabled");
        end
    ';
}

location /RequestDenied {
    return 500;
}
error_page 500 501 502 503 504 /50x.html;

location /50x.html {
    more_set_headers 'Content-Type: application/json';
    return 500 '{"code":$status, "message":"Oops. Something went wrong. Check your URI and try again."}\n';
}